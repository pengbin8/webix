package com.service.Impl;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;

import com.vividsolutions.jts.geom.Coordinate;

/**
 * @author pWX391198
 *
 */
@Service
public class ProjectionsHelper {
	public final double pi = 3.1415926535897932384626;
	public final double a = 6378245.0;
	public final double ee = 0.00669342162296594323;
	public final double x_pi = 3.1415926535897932384626 * 3000.0 / 180.0;

	/// <summary>
	/// gps84经纬度转墨卡托
	/// </summary>
	/// <param name="lon">经度</param>
	/// <param name="lat">纬度</param>
	/// <returns></returns>
	public Coordinate lonLat2Mercator(double lon, double lat) {
		double x = lon * 20037508.342789 / 180;
		double y = Math.log(Math.atan((90 + lat) * pi / 360)) / (pi / 180);
		y = y * 20037508.34789 / 180;
		return new Coordinate(x, y);
	}

	/// <summary>
	/// 墨卡托转gps84经纬度
	/// </summary>
	/// <param name="coordinate"></param>
	/// <returns></returns>
	public Coordinate Mercator2lonLat(Coordinate coordinate) {
		double x = coordinate.x / 20037508.34 * 180;
		double y = coordinate.y / 20037508.34 * 180;
		y = 180 / pi * (2 * Math.atan(Math.exp(y * pi / 180)) - pi / 2);
		Coordinate coord = new Coordinate(x, y);
		return coord;
	}

	public Coordinate wgs_To_Gcj(double lat, double lon) {
		return wgs84_To_Gcj02(lat, lon, false);
	}

	/// <summary>
	/// 84 to 火星坐标系 (GCJ-02) World Geodetic System ==> Mars Geodetic System
	/// </summary>
	/// <param name="lat">纬度</param>
	/// <param name="lon">经度</param>
	/// <returns></returns>
	public Coordinate wgs84_To_Gcj02(double lat, double lon, boolean projectIsInChina) {
		if (projectIsInChina == false && outOfChina(lat, lon)) {
			return new Coordinate(lat, lon);
		}
		double dLat = transformLat(lon - 105.0, lat - 35.0);
		double dLon = transformLon(lon - 105.0, lat - 35.0);
		double radLat = lat / 180.0 * pi;
		double magic = Math.sin(radLat);
		magic = 1 - ee * magic * magic;
		double SqrtMagic = Math.sqrt(magic);
		dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * SqrtMagic) * pi);
		dLon = (dLon * 180.0) / (a / SqrtMagic * Math.cos(radLat) * pi);
		double mgLat = lat + dLat;
		double mgLon = lon + dLon;
		return new Coordinate(mgLat, mgLon);
	}

	public Coordinate wgs84_To_Bd09(double lat, double lon, boolean projectIsInChina) {
		Coordinate gps = wgs84_To_Gcj02(lat, lon, projectIsInChina);
		return gcj02_To_Bd09(gps.x, gps.y);
	}

	public Coordinate gcj_To_Wgs(double lat, double lon) {
		return gcj02_To_Wgs84(lat, lon, false);
	}

	/// <summary>
	/// 火星坐标系 (GCJ-02) to 84
	/// </summary>
	/// <param name="lat"></param>
	/// <param name="lon"></param>
	/// <returns></returns>
	public Coordinate gcj02_To_Wgs84(double lat, double lon, boolean projectIsInChina) {
		if (projectIsInChina == false && outOfChina(lat, lon)) {
			return new Coordinate(lat, lon);
		}
		double dLat = transformLat(lon - 105.0, lat - 35.0);
		double dLon = transformLon(lon - 105.0, lat - 35.0);
		double radLat = lat / 180.0 * pi;
		double sinMagic = Math.sin(radLat);
		sinMagic = 1 - ee * sinMagic * sinMagic;
		double sqrtMagic = Math.sqrt(sinMagic);
		dLat = (dLat * 180.0) / ((a * (1 - ee)) / (sinMagic * sqrtMagic) * pi);
		dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * pi);
		double magicLat = lat + dLat;
		double magicLon = lon + dLon;

		double lontitude = lon * 2 - magicLon;
		double latitude = lat * 2 - magicLat;
		return new Coordinate(latitude, lontitude);
	}

	/// <summary>
	/// 火星坐标系 (GCJ-02) 转百度坐标系 (BD-09)
	/// </summary>
	/// <param name="gg_lat"></param>
	/// <param name="gg_lon"></param>
	/// <returns></returns>
	public Coordinate gcj02_To_Bd09(double gg_lat, double gg_lon) {
		double x = gg_lon, y = gg_lat;
		double z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * x_pi);
		double theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * x_pi);
		double bd_lon = z * Math.cos(theta) + 0.0065;
		double bd_lat = z * Math.sin(theta) + 0.006;
		return new Coordinate(bd_lat, bd_lon);
	}

	/// <summary>
	/// 百度坐标系 (BD-09) 转 火星坐标系 (GCJ-02)
	/// </summary>
	/// <param name="bd_lat"></param>
	/// <param name="bd_lon"></param>
	/// <returns></returns>
	public Coordinate bd09_To_Gcj02(double bd_lat, double bd_lon) {
		double x = bd_lon - 0.0065, y = bd_lat - 0.006;
		double z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * x_pi);
		double theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_pi);
		double gg_lon = z * Math.cos(theta);
		double gg_lat = z * Math.sin(theta);
		return new Coordinate(gg_lat, gg_lon);
	}

	/**
	 * (BD-09)-->84
	 * 
	 * @param bd_lat
	 * @param bd_lon
	 * @return
	 */
	public Coordinate bd09_To_Wgs84(double bd_lat, double bd_lon) {
		Coordinate gcj02 = bd09_To_Gcj02(bd_lat, bd_lon);
		Coordinate map84 = gcj02_To_Wgs84(gcj02.x, gcj02.y, false);
		return map84;
	}

	/// <summary>
	/// 这种判断方式太笼统 慎用，MSP都是依据项目判断是否在国内
	/// </summary>
	/// <param name="lat"></param>
	/// <param name="lon"></param>
	/// <returns></returns>
	public boolean outOfChina(double lat, double lon) {
		if (lon < 72.004 || lon > 137.8347)
			return true;
		if (lat < 0.8293 || lat > 55.8271)
			return true;
		return false;
	}

	public double transformLat(double x, double y) {
		double ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(y * pi) + 40.0 * Math.sin(y / 3.0 * pi)) * 2.0 / 3.0;
		ret += (160.0 * Math.sin(y / 12.0 * pi) + 320 * Math.sin(y * pi / 30.0)) * 2.0 / 3.0;
		return ret;
	}

	public double transformLon(double x, double y) {
		double ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(x * pi) + 40.0 * Math.sin(x / 3.0 * pi)) * 2.0 / 3.0;
		ret += (150.0 * Math.sin(x / 12.0 * pi) + 300.0 * Math.sin(x / 30.0 * pi)) * 2.0 / 3.0;
		return ret;
	}

	/// <summary>
	/// 将空间字符串从高德转为WGS84
	/// </summary>
	/// <param name="dbGeographyStr"></param>
	/// <param name="isInChina"></param>
	/// <returns></returns>
	public String gcj02_To_Wgs84(String dbGeographyStr, boolean isInChina) {
		if (!isInChina) {
			return dbGeographyStr;
		}
		StringBuilder sb = new StringBuilder();
		if (StringUtils.isNotBlank(dbGeographyStr)) {
			int length = dbGeographyStr.length();
			String lon = "";
			String lat = "";
			double lonValue;
			double latValue;
			boolean lonHasValue = false;
			for (int i = 0; i < length; i++) {
				char item = dbGeographyStr.charAt(i);
				switch (item) {
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
				case '.':
				case '-':
					if (!lonHasValue) {
						lon += item;
					} else {
						lat += item;
					}
					break;
				default:
					if (StringUtils.isNotBlank(lon) && StringUtils.isNotBlank(lat)) {
						try {
							lonValue = Double.valueOf(lon);
							latValue = Double.valueOf(lat);
							Coordinate gps = gcj02_To_Wgs84(latValue, lonValue, isInChina);
							String gpstr = gps.x + " " + gps.y;
							sb.append(gpstr);
							lonHasValue = false;
							lon = "";
							lat = "";
							sb.append(item);
						} catch (NumberFormatException e) {
							throw e;
						}
					} else if (StringUtils.isNotBlank(lon)) {
						lonHasValue = true;
					} else {
						sb.append(item);
					}
					break;
				}
			}
		}
		return sb.toString();
	}

}
